{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let nsbtId = base58'6nSpVyNH7yM69eg446wrQR94ipbbcmZMU1ENPwanC97g'
let snsbtId = base58'8wUmN9Y15f3JR4KZfE81XLXpkdgwnqoBNG6NmocZpKQx'
let usdnId = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'
let isStopped = false

@Callable(i)
func stakeNSBT() = {
  let pmt = i.payments[0].value()
  let amount = pmt.amount
  if (pmt.assetId != nsbtId) then {
    throw("attach NSBT token only")
  } else if (isStopped) then { 
    throw("smart contract is on lock")
  } else {
    strict lockInv = invoke(Address(base58'3P8w8NXZUtYdCA13tHbDY5sW4mC27ZFJgG3'), "stake", [], [pmt])
    let snsbtIssue = Reissue(snsbtId, amount, true)
    [
      snsbtIssue,
      ScriptTransfer(i.caller, amount, snsbtId)
    ]
  }
}

@Callable(i)
func swapUsdnWavesOnNeutrino() = {
  if (isStopped) then { 
    throw("smart contract is on lock")
  } else {
    # calculate available limit
    strict amount = invoke(Address(base58'3PC9BfRwJWWiw9AREE2B3eWzCks3CYtg4yo'), "swapParamsByUserSYSREADONLY", [this.toString(), 0], []).exactAs[(Int, Int, Int, Int, Int, Int, Int)]._7

    # start swap
    strict swapInv = invoke(Address(base58'3PC9BfRwJWWiw9AREE2B3eWzCks3CYtg4yo'), "swapNeutrinoToWaves", [], [AttachedPayment(usdnId, amount)])
    [
      IntegerEntry("swap_started", height),
      StringEntry("swap_txId", i.transactionId.toBase58String()),
      IntegerEntry("swap_index", getIntegerValue(Address(base58'3P5Bfd58PPfNvBM2Hy8QfbcDqMeNtzg7KfP'), "price_index") + 1) # height-2001682)
    ]
  }
}

@Callable(i)
func finishSwapAndExchangeWavesUsdnOnDex() = {
  if (isStopped) then { 
    throw("smart contract is on lock")
  } else {
    strict swapFinishInv = invoke(Address(base58'3PC9BfRwJWWiw9AREE2B3eWzCks3CYtg4yo'), "withdraw", [this.toString(), getIntegerValue(this, "swap_index"), getStringValue(this, "swap_txId")], [])

    let amount = wavesBalance(this).available - 200000000

    if (amount <= 0) then {throw("nothing to swap")} else {
      strict swapInv = invoke(Address(base58'3PHaNgomBkrvEL2QnuJarQVJa71wjw9qiqG'), "exchange", [1], [AttachedPayment(unit, amount)])
      []
    }
  }
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
